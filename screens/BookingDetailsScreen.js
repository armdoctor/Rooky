import React, { useEffect, useState } from 'react';
import { StyleSheet, View, Text, TouchableOpacity, Modal, TextInput, ScrollView, SafeAreaView } from 'react-native';
import { collection, doc, updateDoc, query, where, getDocs, addDoc, getDoc } from 'firebase/firestore';
import { db, auth } from '../firebase/firebase';
import { Ionicons } from '@expo/vector-icons';
import Icon from 'react-native-vector-icons/Ionicons';


const BookingDetailsScreen = ({ route, navigation }) => {
  const { booking } = route.params;
  const [coachFullName, setCoachFullName] = useState('');
  const [studentFullName, setStudentFullName] = useState('');
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [reviewText, setReviewText] = useState('');
  const [bookingCompleted, setBookingCompleted] = useState(booking.completed);
  const [rating, setRating] = useState(0); // New state for rating
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);

  useEffect(() => {
    const fetchUserFullNames = async () => {
      try {
        const coachQuery = query(collection(db, 'users'), where('userId', '==', booking.createdBy));
        const coachSnapshot = await getDocs(coachQuery);
        const coachData = coachSnapshot.docs[0].data();
        setCoachFullName(coachData.fullName);

        const studentQuery = query(collection(db, 'users'), where('userId', '==', booking.confirmedBy));
        const studentSnapshot = await getDocs(studentQuery);
        const studentData = studentSnapshot.docs[0].data();
        setStudentFullName(studentData.fullName);
      } catch (error) {
        console.error('Error fetching user full names:', error);
      }
    };

    fetchUserFullNames();
  }, [booking]);

  const fetchBookingDetails = async () => {
    try {
      const bookingRef = doc(db, 'bookingSuggestions', booking.id);
      const bookingSnapshot = await getDoc(bookingRef);
      const bookingData = bookingSnapshot.data();
      setBookingCompleted(bookingData.completed);
    } catch (error) {
      console.error('Error fetching booking details:', error);
    }
  };

  const formatBookingDateTime = (datetime) => {
    const options = { day: 'numeric', month: 'long', year: 'numeric', hour: 'numeric', minute: 'numeric' };
    return datetime.toDate().toLocaleString('en-US', options);
  };

  const cancelBooking = () => {
    setShowConfirmationModal(true);
  };

  const confirmCancelBooking = async () => {
    try {
      const bookingRef = doc(db, 'bookingSuggestions', booking.id);
      await updateDoc(bookingRef, {
        confirmed: false,
      });

      // TODO: Add any additional logic or actions upon successful cancellation

      setShowConfirmationModal(false); // Close the confirmation modal
      navigation.navigate('HomeScreen'); // Navigate back to the BookingManagementScreen

    } catch (error) {
      console.error('Error canceling booking:', error);
    }
  };

  const closeConfirmationModal = () => {
    setShowConfirmationModal(false);
  };

  const completeBooking = () => {
    setIsModalVisible(true);
  };

  const closeReviewModal = () => {
    setIsModalVisible(false);
    setReviewText('');
    fetchBookingDetails();
  };

  const submitReview = async () => {
    try {
      const createdBy = booking.createdBy;
      const selectedCategory = booking.selectedCategory;
  
      console.log('Fetching matching listing...');
      console.log('Created By:', createdBy);
      console.log('Selected Category:', selectedCategory);
  
      // Fetch the user document referenced by createdBy
      const userRef = doc(db, 'users', createdBy);
      const userSnapshot = await getDoc(userRef);
      const userDoc = userSnapshot.data();
  
      // Fetch the category document referenced by selectedCategory
      const categoryRef = doc(db, 'categories', selectedCategory);
      const categorySnapshot = await getDoc(categoryRef);
      const categoryDoc = categorySnapshot.data();
  
      const listingsQuery = query(
        collection(db, 'listings'),
        where('user', '==', userRef),
        where('category', '==', categoryRef)
      );
  
      const listingsSnapshot = await getDocs(listingsQuery);
  
      if (listingsSnapshot.empty) {
        console.error('No matching listing found');
        return;
      }
  
      const listingId = listingsSnapshot.docs[0].id;
      console.log('Matching listing ID:', listingId);
  
      const reviewData = {
        reviewId: '', // Review ID generated by Firestore
        bookingId: booking.id,
        listingId: listingId,
        reviewText,
        rating,
        createdAt: new Date().toISOString(),
        reviewerId: auth.currentUser.uid, // Add the userID of the current user
      };
  
      console.log('Review data:', reviewData);
  
      const reviewDocRef = await addDoc(collection(db, 'reviews'), reviewData);
      console.log('Review document added:', reviewDocRef.id);
  
      const updatedBooking = { completed: true };
      const bookingRef = doc(db, 'bookingSuggestions', booking.id);
      await updateDoc(bookingRef, { completed: true });
  
      setReviewText('');
      setIsModalVisible(false);
      navigation.navigate('BookingManagementScreen')
  
      console.log('Review submission successful');
  
      // TODO: Add any additional logic or actions upon successful review submission
  
    } catch (error) {
      console.error('Error submitting review:', error);
    }
  };

  const renderStars = () => {
    const starIcons = [];

    for (let i = 1; i <= 5; i++) {
      const iconName = i <= rating ? 'star' : 'star-outline';
      const starIcon = (
        <TouchableOpacity
          key={i}
          onPress={() => setRating(i)}
          disabled={showConfirmationModal}
        >
          <Ionicons name={iconName} size={24} color="#FFD700" />
        </TouchableOpacity>
      );
      starIcons.push(starIcon);
    }

    return starIcons;
  };
  
  const handleBackButtonPress = () => {
    navigation.goBack();
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={handleBackButtonPress}>
          <Icon name="arrow-back" size={25} color="#FF385C" />
      </TouchableOpacity>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Booking Details</Text>
      </View>

      <View style={styles.section}>
        <Text style={styles.label}>Class Start:</Text>
        <Text style={styles.info}>{formatBookingDateTime(booking.classStart)}</Text>
      </View>

      <View style={styles.section}>
        <Text style={styles.label}>Class End:</Text>
        <Text style={styles.info}>{formatBookingDateTime(booking.classEnd)}</Text>
      </View>

      <View style={styles.section}>
        <Text style={styles.label}>Coach:</Text>
        <Text style={styles.info}>{coachFullName}</Text>
      </View>

      <View style={styles.section}>
        <Text style={styles.label}>Rookie:</Text>
        <Text style={styles.info}>{studentFullName}</Text>
      </View>

      <View style={styles.section}>
        <Text style={styles.label}>Number of Students:</Text>
        <Text style={styles.info}>{booking.numberOfStudents}</Text>
      </View>

      <View style={styles.section}>
        <Text style={styles.label}>Selected Category:</Text>
        <Text style={styles.info}>{booking.selectedCategory}</Text>
      </View>
      <View style={styles.section}>
        <Text style={styles.label}>Location:</Text>
        <Text style={styles.info}>{booking.location}</Text>
      </View>

      {!bookingCompleted && (
        <TouchableOpacity style={styles.cancelButton} onPress={cancelBooking}>
          <Text style={styles.cancelButtonText}>Cancel Booking</Text>
        </TouchableOpacity>
      )}

      {booking.createdBy !== auth.currentUser.uid && !bookingCompleted && (
        <TouchableOpacity style={styles.completeButton} onPress={completeBooking}>
          <Text style={styles.completeButtonText}>Complete Booking</Text>
        </TouchableOpacity>
      )}

      <Modal visible={isModalVisible} animationType="slide">
        <SafeAreaView>
          <ScrollView>
            <View style={styles.modalContainer}>
              <Text style={styles.modalTitle}>Provide a Review</Text>
              <TextInput
                style={styles.reviewInput}
                placeholder="Enter your review"
                multiline
                value={reviewText}
                onChangeText={setReviewText}
              />
              <View style={styles.ratingContainer}>
                <Text style={styles.ratingText}>Rating:</Text>
                {renderStars()}
              </View>
              <View style={styles.buttonContainer}>
                <TouchableOpacity style={styles.cancelButton} onPress={closeReviewModal}>
                  <Text style={styles.cancelButtonText}>Cancel</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.submitButton} onPress={submitReview}>
                  <Text style={styles.submitButtonText}>Submit Review</Text>
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
        </SafeAreaView>
      </Modal>

      <Modal visible={showConfirmationModal} animationType="slide">
        <View style={styles.confirmationModal}>
          <Text style={styles.confirmationText}>Are you sure you want to cancel the booking?</Text>
          <Text style={styles.confirmationSubText}>Please respect your coach's or rookie's time by letting them know that you would like to cancel your class before confirming.</Text>
          <View style={styles.confirmationButtons}>
            <TouchableOpacity style={styles.confirmButton} onPress={confirmCancelBooking}>
              <Text style={styles.confirmButtonText}>Confirm</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.cancelButton} onPress={closeConfirmationModal}>
              <Text style={styles.cancelButtonText}>Go Back</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F7F7F7',
    paddingTop: 32,
  },
  backButton: {
    position: 'absolute',
    top: 62,
    left: 10,
    zIndex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    marginBottom: 24,
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    paddingTop: 24,
    marginBottom: 0,
    textAlign: 'center',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    paddingTop: 27,
    marginBottom: 20,
    marginLeft: 90,
    textAlign: 'center',
  },
  section: {
    marginBottom: 16,
    paddingHorizontal: 16,
  },
  label: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  info: {
    fontSize: 16,
    marginTop: 4,
    color: '#555',
  },
  cancelButton: {
    alignSelf: 'center',
    backgroundColor: '#FF385C',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    margin: 10,
  },
  cancelButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
  },
  completeButton: {
    alignSelf: 'center',
    backgroundColor: '#1B998B',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  completeButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingTop: 20,
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center',
  },
  reviewInput: {
    width: '100%',
    height: 200,
    borderWidth: 1,
    borderColor: '#555',
    borderRadius: 8,
    padding: 8,
    marginBottom: 16,
    textAlignVertical: 'top',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  submitButton: {
    backgroundColor: '#1B998B',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    margin: 10,
  },
  submitButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  ratingText: {
    marginRight: 8,
    fontSize: 16,
    fontWeight: 'bold',
    color: '#555',
  },
  confirmationModal: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingTop: 20,
  },
  confirmationText: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  confirmationSubText: {
    fontSize: 14,
    fontWeight: '400',
    color: "#555",
    marginBottom: 20,
    textAlign: 'center',
  },
  confirmationButtons: {
    flexDirection: 'row',
    justifyContent: 'center',
  },
  confirmButton: {
    backgroundColor: '#FF5A5F',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    margin: 10,
  },
  confirmButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#fff',
  },
});

export default BookingDetailsScreen;